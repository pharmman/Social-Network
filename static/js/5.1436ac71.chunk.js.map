{"version":3,"sources":["components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/Profile/Contacts/Contacts.tsx","components/Profile/ProfileInfo/ProfileStatusWithHook.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","Post","props","className","classes","post__wrapper","avatar","src","alt","title","post","messages","disabled","likesCount","MyPostsWithForm","reduxForm","form","onSubmit","handleSubmit","Field","validate","required","name","component","Textarea","connect","state","messageForNewPost","profilePage","posts","dispatch","addPost","value","addPostActionCreator","console","log","map","p","key","id","message","postValue","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","length","err","unsupportedIterableToArray","TypeError","Contacts","profile","contacts","facebook","website","vk","twitter","instagram","youtube","github","mainLink","ProfileStatusWithHooks","propsStatus","updateProfileStatus","useEffect","setStatus","useState","editMode","setEditMode","status","onChange","e","currentTarget","autoFocus","onBlur","onDoubleClick","ProfileInfo","accordionMode","setAccordionMode","profile__img","profile__imgLogo","photos","large","description","aboutMe","style","cursor","display","onClick","lookingForAJob","lookingForAJobDescription","fullName","Preloader","Profile","MyPostsContainer","ProfileContainer","userId","this","match","params","getUserProfile","getProfileStatus","authorizedUserId","toString","history","React","Component","compose","withRouter","auth","isAuth"],"mappings":"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","file":"static/js/5.1436ac71.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"Post_avatar__1gm9V\",\"post\":\"Post_post__18HVK\",\"post__wrapper\":\"Post_post__wrapper__6iVzC\",\"likesCount\":\"Post_likesCount__1P2ws\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile__img\":\"ProfileInfo_profile__img__MJwCi\",\"description\":\"ProfileInfo_description__3W8JE\",\"profile__imgLogo\":\"ProfileInfo_profile__imgLogo__35V1C\"};","import React from 'react';\r\nimport classes from './Post.module.css'\r\n\r\ntype PostPropsType = {\r\n    messages: string\r\n    likesCount: number\r\n}\r\n\r\nexport function Post(props: PostPropsType) {\r\n\r\n\r\n    return (\r\n        <div className={classes.post__wrapper}>\r\n            <div className={classes.avatar}>\r\n                <img\r\n                    src=\"https://cdn.vox-cdn.com/thumbor/yU7dbyR-N-m1lWDyLhaJPydUESg=/0x33:640x393/1600x900/cdn.vox-cdn.com/assets/1496753/stevejobs.jpg\" alt='steve jobs' title={'Steve Jobs'}/>\r\n            </div>\r\n            <div className={classes.post}>\r\n                {props.messages}\r\n                <button disabled={true}>like</button>\r\n            </div>\r\n            <div>\r\n                LikesCount: <span className={classes.likesCount}>{props.likesCount}</span>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {Post} from './Post/Post';\r\nimport {MyPostsPropsType} from './MyPostsContainer';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {required} from '../../../validators/validators';\r\nimport {Textarea} from '../../common/formContorols/FormControls';\r\n\r\ntype FormDataType = {\r\n    postValue: string\r\n}\r\n\r\n\r\n export const MyPosts = (props: MyPostsPropsType) => {\r\n     console.log('yo')\r\n    const posts = props.posts.map(p => {\r\n        return (\r\n            <Post key={p.id} messages={p.message} likesCount={p.likesCount}/>\r\n        )\r\n    })\r\n    const addPost = (value: FormDataType) => {\r\n        props.addPost(value.postValue)\r\n    }\r\n    return (\r\n        <div>\r\n            My posts\r\n            <MyPostsWithForm onSubmit={addPost}/>\r\n            {posts}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MyPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field validate={[required]} name={'postValue'} component={Textarea}/>\r\n            <button>Add post</button>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nexport const MyPostsWithForm = reduxForm<FormDataType>({form: 'post'})(MyPostForm)\r\n\r\n","import {addPostActionCreator} from '../../../redux/profile-reducer';\r\nimport {MyPosts} from './MyPosts';\r\nimport {connect} from 'react-redux';\r\nimport {StateType} from '../../../redux/redux-store';\r\nimport {ActionsType, PostsDataType} from '../../../redux/store';\r\nimport {Dispatch} from 'redux';\r\n\r\nexport type MyPostsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\ntype MapStateToPropsType = {\r\n    messageForNewPost: string\r\n    posts: PostsDataType[]\r\n}\r\n\r\nconst mapStateToProps = (state:StateType):MapStateToPropsType => {\r\n    return {\r\n        messageForNewPost: state.profilePage.messageForNewPost,\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addPost: (value:string) => void\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch:Dispatch<ActionsType>):MapDispatchToPropsType => {\r\n    return {\r\n        addPost: (value) => {\r\n            dispatch(addPostActionCreator(value))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default connect<MapStateToPropsType,MapDispatchToPropsType,{}, StateType>(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\n","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React from 'react';\r\nimport {ProfileType} from '../../../redux/profile-reducer';\r\n\r\ntype ContactsPropsType = {\r\n    profile: ProfileType | null\r\n}\r\n\r\n\r\nexport const Contacts = (props: ContactsPropsType) => {\r\n    return (\r\n        <>\r\n            <p>Facebook: {props.profile?.contacts.facebook}</p>\r\n            <p>Website: {props.profile?.contacts.website}</p>\r\n            <p>VK: {props.profile?.contacts.vk}</p>\r\n            <p>Twitter: {props.profile?.contacts.twitter}</p>\r\n            <p>Instagram: {props.profile?.contacts.instagram}</p>\r\n            <p>Youtube: {props.profile?.contacts.youtube}</p>\r\n            <p>Github: {props.profile?.contacts.github}</p>\r\n            <p>MainLink: {props.profile?.contacts.mainLink}</p>\r\n        </>\r\n    )\r\n}","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusPropsType = {\r\n    propsStatus: string\r\n    updateProfileStatus: (status: string) => void\r\n}\r\n\r\ntype LocalStateType = {\r\n    editMode: boolean,\r\n    status: string\r\n}\r\n\r\nexport const ProfileStatusWithHooks: React.FC<ProfileStatusPropsType> = ({propsStatus, updateProfileStatus}) => {\r\n\r\n    useEffect(() => {\r\n        setStatus(propsStatus)\r\n    }, [propsStatus])\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(propsStatus)\r\n\r\n    const onchangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    const deActivateEditMod = () => {\r\n        updateProfileStatus(status)\r\n        setEditMode(false)\r\n    }\r\n\r\n    const activateEditMod = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {editMode ?\r\n                <input onChange={onchangeHandler} value={status} autoFocus={true}\r\n                       onBlur={deActivateEditMod}/>\r\n                :\r\n                <span onDoubleClick={activateEditMod}>{propsStatus}</span>}\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport classes from './ProfileInfo.module.css'\r\nimport {ProfileType} from '../../../redux/profile-reducer';\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport {Contacts} from '../Contacts/Contacts';\r\nimport {ProfileStatusWithHooks} from './ProfileStatusWithHook';\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType | null\r\n    updateProfileStatus: (status: string) => void\r\n    status: string\r\n}\r\n\r\nexport function ProfileInfo(props: ProfileInfoPropsType) {\r\n    const [accordionMode, setAccordionMode] = useState<boolean>(false)\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={classes.profile}>\r\n            <div className={classes.profile__img}>\r\n                <div className={classes.profile__imgLogo}>\r\n                    <img src=\"https://www.ixbt.com/img/n1/news/2019/7/5/dims_3_large.jpg\"\r\n                         alt=\"\"/>\r\n                </div>\r\n                <div>\r\n                    {props.profile?.photos.large ? <img src={props.profile?.photos.large}\r\n                                                        alt=\"\"/> :\r\n                        <img src={'https://i.pinimg.com/originals/3f/c3/11/3fc3111809a18f70a9f1ccbea7e1ade6.jpg'}\r\n                             alt={''}/>}\r\n                    <ProfileStatusWithHooks updateProfileStatus={props.updateProfileStatus}  propsStatus={props.status || '-----'}/>\r\n                </div>\r\n            </div>\r\n            <div className={classes.description}>\r\n                <h4>About me: {props.profile?.aboutMe}</h4>\r\n                <h4 style={{cursor: 'pointer', display: 'inline-block'}}\r\n                    onClick={() => setAccordionMode(!accordionMode)}>CONTACTS:</h4>\r\n                {accordionMode && <Contacts profile={props.profile}/>}\r\n                <h4>Looking for a Job: {props.profile?.lookingForAJob ? '🤑' : '🤢'}</h4>\r\n                <h4>Looking For A Job Description: {props.profile?.lookingForAJobDescription}</h4>\r\n                <h4>Full name: {props.profile?.fullName}</h4>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo';\r\nimport {ProfileType} from '../../redux/profile-reducer';\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType | null\r\n    updateProfileStatus: (status: string) => void\r\n    status: string\r\n}\r\n\r\nexport function Profile(props: ProfilePropsType) {\r\n    return (\r\n        <>\r\n            <ProfileInfo\r\n                profile={props.profile} status={props.status}\r\n                updateProfileStatus={props.updateProfileStatus}/>\r\n            <MyPostsContainer/>\r\n        </>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport {Profile} from './Profile';\r\nimport {getProfileStatus, getUserProfile, ProfileType, updateProfileStatus} from '../../redux/profile-reducer';\r\nimport {StateType} from '../../redux/redux-store';\r\nimport {connect} from 'react-redux';\r\nimport {withRouter} from 'react-router-dom'\r\nimport {RouteComponentProps} from 'react-router'\r\nimport {compose} from 'redux';\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype ProfileContainerType = RouteComponentProps<PathParamsType> & OwnPropsType\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    updateProfileStatus: (status: string) => void\r\n    getProfileStatus: (userId: string) => void\r\n}\r\n\r\nexport type OwnPropsType = MapStateToPropsType & MapDispatchToPropsType;\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerType, StateType> {\r\n    componentDidMount() {\r\n        let userId: string\r\n        if (this.props.match.params.userId) {\r\n            userId = this.props.match.params.userId\r\n            this.props.getUserProfile(userId)\r\n            this.props.getProfileStatus(userId)\r\n        }\r\n        if (!this.props.match.params.userId && this.props.authorizedUserId) {\r\n            userId = this.props.authorizedUserId.toString()\r\n            this.props.getUserProfile(userId)\r\n            this.props.getProfileStatus(userId)\r\n        }\r\n        if (!this.props.match.params.userId && !this.props.authorizedUserId) {\r\n            this.props.history.push('/login')\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Profile {...this.props} profile={this.props.profile}/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: StateType): MapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    // withAuthRedirect,\r\n    withRouter,\r\n    connect<MapStateToPropsType, MapDispatchToPropsType, {}, StateType>(mapStateToProps, {\r\n        getUserProfile,\r\n        updateProfileStatus,\r\n        getProfileStatus\r\n    }))(ProfileContainer)\r\n\r\n\r\n\r\n"],"sourceRoot":""}