{"version":3,"sources":["api/api.ts","redux/dialogs-reducer.tsx","localStorage/localStorage.ts","redux/users-reducer.tsx","components/common/Preloader/Preloader.module.css","components/Navbar/Navbar.module.css","serviceWorker.ts","components/Navbar/Navbar.tsx","components/Header/Header.tsx","redux/auth-reducer.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","redux/app-reducer.tsx","hoc/ComponentWithSuspense.tsx","App.tsx","redux/redux-store.ts","index.tsx","components/common/formContorols/FormControls.tsx","components/common/formContorols/FormControls.module.css","components/common/Preloader/Preloader.tsx","validators/validators.ts","components/Header/Header.module.css","redux/profile-reducer.tsx"],"names":["instance","axios","create","withCredentials","headers","baseURL","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","followAPI","follow","id","post","unFollow","delete","profileAPI","getProfile","userId","getProfileStatus","updateProfileStatus","status","put","authAPI","authMe","login","email","password","rememberMe","logOut","initialState","textForNewMessage","dialogs","name","messages","message","dialogsReducer","state","action","type","value","addNewMessageActionCreator","saveState","key","stateAsString","JSON","stringify","localStorage","setItem","users","totalUsersCount","isFetching","followingInProgress","usersReducer","map","u","followed","page","count","fetching","followingProgress","filter","followAC","unFollowAC","userID","setCurrentPage","setTotalUsersCount","changeFetchingStatus","toggleFollowingProgress","requestUsers","dispatch","a","totalCount","items","followUnfollowFlow","apiMethod","actionCreator","resultCode","bind","module","exports","Boolean","window","location","hostname","match","Navbar","className","classes","navbar","navbar__item","to","activeClassName","active","href","Header","props","header","header__logo","src","alt","isAuth","onClick","logOutTC","setAuthData","payload","getAuthUserData","HeaderContainer","this","React","Component","connect","auth","maxLength30","maxLength","LoginFormReduxForm","reduxForm","form","onSubmit","handleSubmit","createField","Input","required","error","styles","commonError","loginTC","length","stopSubmit","_error","formData","initialization","withSuspense","WrappedComponent","Suspense","fallback","Preloader","UsersContainer","lazy","DialogsContainer","ProfileContainer","App","initializeApp","path","render","compose","withRouter","app","reducers","combineReducers","profilePage","profileReducer","dialogsPage","usersPage","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","FormControl","input","meta","hasError","touched","children","errorSpan","Textarea","restProps","placeholder","component","validators","text","validate","lds_grid","undefined","max","profile","messageForNewPost","posts","likesCount","p","addPostActionCreator","setProfileStatus","getUserProfile"],"mappings":"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","file":"static/js/main.b4abba9a.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport {UserType} from '../redux/users-reducer';\r\n\r\ntype GetUsersResponseType = {\r\n    items: UserType[]\r\n    totalCount: string\r\n    error: string | null\r\n}\r\n\r\nexport type ResponseType = {\r\n    resultCode: number\r\n    messages: string[]\r\n    data: {}\r\n}\r\n\r\ntype ProfileResponseType = {\r\n    aboutMe: string\r\n    contacts: {\r\n        facebook: null | string\r\n        website: null | string\r\n        vk: null | string\r\n        twitter: null | string\r\n        instagram: null | string\r\n        youtube: null | string\r\n        github: null | string\r\n        mainLink: null | string\r\n    }\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    userId: number\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n}\r\n\r\ntype AuthMeResponseType<T = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}> = {\r\n    data: T\r\n    resultCode: number\r\n    messages: Array<string>\r\n}\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'ea1464d3-6693-4a83-9755-2421f1dd088c'\r\n    },\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n})\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number = 1, pageSize: number = 10) {\r\n        return instance.get<GetUsersResponseType>(`users?count=${pageSize}&page=${currentPage}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    }\r\n}\r\n\r\nexport const followAPI = {\r\n    follow(id: number) {\r\n        return instance.post<ResponseType>(`follow/${id}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    unFollow(id: number) {\r\n        return instance.delete<ResponseType>(`follow/${id}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: string) {\r\n        return instance.get<ProfileResponseType>(`profile/${userId}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    getProfileStatus(userId: string) {\r\n        return instance.get<string>(`profile/status/${userId}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    updateProfileStatus(status: string) {\r\n        return instance.put<ResponseType>('profile/status', {status})\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    authMe() {\r\n        return instance.get<AuthMeResponseType>('/auth/me')\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post<AuthMeResponseType<{ userId: number }>>('auth/login', {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n        })\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    logOut() {\r\n        return instance.delete<AuthMeResponseType<Object>>('auth/login',)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    }\r\n}","import {ActionsType, DialogsPageType} from './store';\r\n\r\nconst initialState = {\r\n    textForNewMessage: '',\r\n    dialogs: [\r\n        {id: 1, name: 'Steve'},\r\n        {id: 2, name: 'Tim'},\r\n        {id: 3, name: 'Jhonny'},\r\n        {id: 4, name: 'Andy'},\r\n        {id: 5, name: 'Sasha'},\r\n    ],\r\n    messages: [\r\n        {id: 1, message: 'Hello'},\r\n        {id: 2, message: 'How is your day?'},\r\n        {id: 3, message: 'Introduce Iphone'},\r\n        {id: 4, message: 'Introduce Ipad'},\r\n        {id: 5, message: 'Google suck'},\r\n    ]\r\n}\r\n\r\nexport const dialogsReducer = (state: DialogsPageType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case 'DIALOGS/ADD-NEW-MESSAGE':\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, message: action.value}],\r\n                textForNewMessage: ''\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport type AddNewMessageType = ReturnType<typeof addNewMessageActionCreator>\r\nexport const addNewMessageActionCreator = (value:string) => {\r\n    return {\r\n        type: 'DIALOGS/ADD-NEW-MESSAGE',\r\n        value\r\n    } as const\r\n}","export function saveState<T>(key: string, state: T) {\r\n    const stateAsString = JSON.stringify(state);\r\n    localStorage.setItem(key, stateAsString)\r\n}\r\n\r\nexport function restoreState<T>(key: string, defaultState: T) {\r\n    const stateAsString = localStorage.getItem(key);\r\n    if (stateAsString !== null) defaultState = JSON.parse(stateAsString) as T;\r\n    return defaultState;\r\n}\r\n","import {ActionsType, ThunkType} from './store';\r\nimport {followAPI, ResponseType, usersAPI} from '../api/api';\r\nimport {saveState} from '../localStorage/localStorage';\r\nimport {Dispatch} from 'redux';\r\n\r\nexport type UsersPageType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: number[]\r\n}\r\n\r\nexport type UserType = {\r\n    id: number\r\n    name: string\r\n    status: string | null\r\n    photos: {\r\n        small: string | null\r\n        large: string | null\r\n    }\r\n    followed: boolean\r\n}\r\n\r\nconst initialState = {\r\n    users: [],\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    pageSize: 10,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n}\r\n\r\n\r\nexport const usersReducer = (state: UsersPageType = initialState, action: ActionsType): UsersPageType => {\r\n    switch (action.type) {\r\n        case 'USERS/FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.id) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case 'USERS/UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.id) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case 'USERS/SET-USERS':\r\n            return {\r\n                ...state,\r\n                users: [...action.users]\r\n            }\r\n        case 'USERS/SET-CURRENT-PAGE':\r\n            saveState('currentUsersPage', action.page)\r\n            return {\r\n                ...state,\r\n                currentPage: action.page\r\n            }\r\n        case 'USERS/SET-TOTAL-USERS-COUNT':\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.count\r\n            }\r\n        case 'USERS/CHANGE-FETCHING-STATUS':\r\n            return {\r\n                ...state,\r\n                isFetching: action.fetching\r\n            }\r\n        case 'USERS/TOGGLE-FOLLOWING-PROGRESS':\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.followingProgress\r\n                    ?\r\n                    [...state.followingInProgress, action.userId]\r\n                    :\r\n                    state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type FollowType = ReturnType<typeof followAC>\r\nexport type UnfollowType = ReturnType<typeof unFollowAC>\r\nexport type SetUsersType = ReturnType<typeof setUsers>\r\nexport type SetCurrentPageType = ReturnType<typeof setCurrentPage>\r\nexport type SetTotalUsersCountType = ReturnType<typeof setTotalUsersCount>\r\nexport type ChangeFetchingStatusType = ReturnType<typeof changeFetchingStatus>\r\nexport type ToggleFollowingProgressType = ReturnType<typeof toggleFollowingProgress>\r\n\r\nexport const followAC = (userId: number) => {\r\n    return {\r\n        type: 'USERS/FOLLOW',\r\n        id: userId\r\n    } as const\r\n}\r\n\r\nexport const unFollowAC = (userID: number) => {\r\n    return {\r\n        type: 'USERS/UNFOLLOW',\r\n        id: userID\r\n    } as const\r\n}\r\n\r\nexport const setUsers = (users: Array<UserType>) => {\r\n    return {\r\n        type: 'USERS/SET-USERS',\r\n        users: users\r\n    } as const\r\n}\r\n\r\nexport const setCurrentPage = (page: number) => {\r\n    return {\r\n        type: 'USERS/SET-CURRENT-PAGE',\r\n        page\r\n    } as const\r\n}\r\n\r\nexport const setTotalUsersCount = (count: number) => {\r\n    return {\r\n        type: 'USERS/SET-TOTAL-USERS-COUNT',\r\n        count\r\n    } as const\r\n}\r\n\r\nexport const changeFetchingStatus = (fetching: boolean) => {\r\n    return {\r\n        type: 'USERS/CHANGE-FETCHING-STATUS',\r\n        fetching\r\n    } as const\r\n}\r\n\r\nexport const toggleFollowingProgress = (followingProgress: boolean, userId: number) => {\r\n    return {\r\n        type: 'USERS/TOGGLE-FOLLOWING-PROGRESS',\r\n        followingProgress,\r\n        userId\r\n    } as const\r\n}\r\n\r\nexport const requestUsers = (currentPage: number, pageSize: number): ThunkType => async (dispatch) => {\r\n    dispatch(changeFetchingStatus(true))\r\n    const data = await usersAPI.getUsers(currentPage, pageSize)\r\n    dispatch(setCurrentPage(currentPage))\r\n    dispatch(changeFetchingStatus(false))\r\n    dispatch(setTotalUsersCount(+data.totalCount))\r\n    dispatch(setUsers(data.items))\r\n}\r\n\r\nconst followUnfollowFlow = async (\r\n    dispatch: Dispatch, apiMethod: (id: number) => Promise<ResponseType>, id: number, actionCreator: (id: number) => ActionsType) => {\r\n    dispatch(toggleFollowingProgress(true, id))\r\n    const data = await apiMethod(id)\r\n    if (data.resultCode === 0) {\r\n        dispatch(actionCreator(id))\r\n    }\r\n    dispatch(toggleFollowingProgress(false, id))\r\n}\r\n\r\n// export const follow = (id: number): ThunkType => async (dispatch) => {\r\n//     dispatch(toggleFollowingProgress(true, id))\r\n//     const data = await followAPI.follow(id)\r\n//     if (data.resultCode === 0) {\r\n//         dispatch(followAC(id))\r\n//     }\r\n//     dispatch(toggleFollowingProgress(false, id))\r\n// }\r\n\r\nexport const follow = (id: number): ThunkType => async (dispatch) => {\r\n    await followUnfollowFlow(dispatch, followAPI.follow.bind(followAPI), id, followAC)\r\n}\r\n\r\nexport const unFollow = (id: number): ThunkType => async (dispatch) => {\r\n    await followUnfollowFlow(dispatch, followAPI.unFollow.bind(followAPI), id, unFollowAC)\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lds_grid\":\"Preloader_lds_grid__lJrG2\",\"lds-grid\":\"Preloader_lds-grid__32jtE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__1wkao\",\"navbar__item\":\"Navbar_navbar__item__1_xvB\",\"active\":\"Navbar_active__1wtfh\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport classes from './Navbar.module.css'\r\nimport {NavLink} from 'react-router-dom';\r\n\r\n\r\nexport function Navbar() {\r\n    return (\r\n        <nav className={classes.navbar}>\r\n            <div className={classes.navbar__item}>\r\n                <NavLink to={'/profile'} activeClassName={classes.active}>Profile</NavLink>\r\n            </div>\r\n            <div className={classes.navbar__item}>\r\n                <NavLink to={'/dialogs'} activeClassName={classes.active}>Messages</NavLink>\r\n            </div>\r\n            <div className={classes.navbar__item}>\r\n                <a href={'/dialogs'}>News</a>\r\n            </div>\r\n            <div className={classes.navbar__item}>\r\n                <a href={'/dialogs'}>Music</a>\r\n            </div>\r\n            <div className={classes.navbar__item}>\r\n                <a href={'/dialogs'}>Settings</a>\r\n            </div>\r\n            <div className={classes.navbar__item}>\r\n                <NavLink to={'/users'} activeClassName={classes.active}>Users</NavLink>\r\n            </div>\r\n            <div className={classes.navbar__item}>\r\n                <NavLink to={'/login'} activeClassName={classes.active}>Login</NavLink>\r\n            </div>\r\n        </nav>\r\n    )\r\n}","import React from 'react';\r\nimport classes from './Header.module.css'\r\nimport {HeaderContainerPropsType} from './HeaderContainer';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\ntype HeaderPropsType = HeaderContainerPropsType\r\n\r\nexport function Header(props: HeaderPropsType) {\r\n\r\n    const logOut = () => {\r\n        props.logOutTC()\r\n    }\r\n\r\n    return (\r\n        <header className={classes.header}>\r\n            <img className={classes.header__logo}\r\n                 src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/2c/The_social_network.svg/1280px-The_social_network.svg.png\"\r\n                 alt=\"logo\"/>\r\n            <div className={classes.login}>\r\n                {props.isAuth\r\n                    ? <div>{props.login} - <button onClick={logOut}>LogOut</button> </div>\r\n                    :\r\n                <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </header>\r\n\r\n    )\r\n}","import {ActionsType, ThunkType} from './store';\r\nimport {authAPI} from '../api/api';\r\nimport {stopSubmit} from 'redux-form';\r\nimport {Dispatch} from 'redux';\r\n\r\n\r\nexport type AuthDataType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\nconst initialState: AuthDataType = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n}\r\n\r\nexport const authReducer = (state = initialState, action: ActionsType): AuthDataType => {\r\n    switch (action.type) {\r\n        case 'AUTH/SET-AUTH-DATA':\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type SetAuthDataType = ReturnType<typeof setAuthData>\r\nexport const setAuthData = (id: number | null, email: string | null, login: string | null, isAuth: boolean) =>\r\n    ({type: 'AUTH/SET-AUTH-DATA', payload: {id, email, login, isAuth}} as const)\r\n\r\nexport const getAuthUserData = () => async (dispatch: Dispatch) => {\r\n    const data = await authAPI.authMe()\r\n    if (data.resultCode === 0) {\r\n        const {id, email, login} = data.data\r\n        dispatch(setAuthData(id, email, login, true))\r\n    }\r\n}\r\nexport const loginTC = (email: string, password: string, rememberMe: boolean): ThunkType =>\r\n    async (dispatch) => {\r\n        const response = await authAPI.login(email, password, rememberMe)\r\n        if (response.resultCode === 0) {\r\n            dispatch(getAuthUserData())\r\n        } else {\r\n            const message = response.messages.length > 0 ? response.messages[0] : 'Email or password incorrect'\r\n            dispatch(stopSubmit('login', {_error: message}))\r\n        }\r\n    }\r\n\r\nexport const logOutTC = (): ThunkType => async (dispatch) => {\r\n    const response = await authAPI.logOut()\r\n    if (response.resultCode === 0) {\r\n        dispatch(setAuthData(null, null, null, false))\r\n    }\r\n}","import React from 'react';\r\nimport {Header} from './Header';\r\nimport {StateType} from '../../redux/redux-store';\r\nimport {logOutTC} from '../../redux/auth-reducer';\r\nimport {connect} from 'react-redux';\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    logOutTC: () => void\r\n}\r\n\r\nexport type HeaderContainerPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerPropsType, StateType> {\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Header {...this.props}/>\r\n            </>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state: StateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login\r\n    }\r\n}\r\n\r\nexport default connect<MapStateToPropsType, MapDispatchToPropsType, {}, StateType>(mapStateToProps,\r\n    {\r\n        logOutTC\r\n    }\r\n)(HeaderContainer)","import React from 'react';\r\nimport {InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {createField, Input} from '../common/formContorols/FormControls';\r\nimport {maxLength, required} from '../../validators/validators';\r\nimport {connect} from 'react-redux';\r\nimport {loginTC, logOutTC} from '../../redux/auth-reducer';\r\nimport {StateType} from '../../redux/redux-store';\r\nimport {Redirect} from 'react-router-dom';\r\nimport styles from './../common/formContorols/FormControls.module.css'\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string,\r\n    rememberMe: boolean\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    loginTC: (email: string, password: string, rememberMe: boolean) => void,\r\n    logOutTC: () => void\r\n}\r\n\r\ntype LoginPropsType = {\r\n    loginTC: (email: string, password: string, rememberMe: boolean) => void\r\n    logOutTC: () => void\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: StateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nconst Login = (props: LoginPropsType) => {\r\n\r\n    const login = (formData: FormDataType) => {\r\n        props.loginTC(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/Profile'}/>\r\n    }\r\n    return (\r\n        <LoginFormReduxForm onSubmit={login}/>\r\n    )\r\n}\r\n\r\nconst maxLength30 = maxLength(30)\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            {createField('Email', 'email', Input,'email', [maxLength30, required])}\r\n            {createField('Password', 'password', Input,'password', [maxLength30, required] )}\r\n            {createField(null, 'RememberMe', Input,'checkbox',[],' Remember me')}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n            {props.error && <div className={styles.commonError}>\r\n                {props.error}\r\n            </div>\r\n            }\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginFormReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm)\r\n\r\nexport default connect<MapStateToPropsType, MapDispatchToPropsType, {}, StateType>(mapStateToProps, {\r\n    loginTC,\r\n    logOutTC\r\n})(Login)\r\n\r\n","import {ThunkType} from './store';\r\nimport {getAuthUserData} from './auth-reducer';\r\n\r\nexport type AppDataType = {\r\n    initialization: boolean\r\n}\r\nexport type AppReducerActionsType = SetInitializationType\r\ntype SetInitializationType = ReturnType<typeof setInitialization>\r\nconst initialState: AppDataType = {\r\n    initialization: false,\r\n}\r\n\r\nexport const appReducer = (state = initialState, action: AppReducerActionsType): AppDataType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-INITIALIZATION':\r\n            return {\r\n                ...state,\r\n                initialization: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst setInitialization = () => ({type: 'APP/SET-INITIALIZATION'} as const)\r\nexport const initializeApp = ():ThunkType => (dispatch) => {\r\n    dispatch(getAuthUserData()).then(() => {\r\n        dispatch(setInitialization())\r\n    })\r\n}","import React from 'react';\r\nimport {Preloader} from '../components/common/Preloader/Preloader';\r\n\r\n\r\nexport function withSuspense(WrappedComponent: any) {\r\n\r\n    return (props:any) => {\r\n        return <React.Suspense fallback={<Preloader/>}><WrappedComponent {...props}/></React.Suspense>\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {Navbar} from './components/Navbar/Navbar';\r\nimport {Route, withRouter} from 'react-router-dom';\r\nimport HeaderContainer from './components/Header/HeaderContainer';\r\nimport Login from './components/Login/Login';\r\nimport {connect} from 'react-redux';\r\nimport {getAuthUserData} from './redux/auth-reducer';\r\nimport {StateType} from './redux/redux-store';\r\nimport {initializeApp} from './redux/app-reducer';\r\nimport {Preloader} from './components/common/Preloader/Preloader';\r\nimport {compose} from 'redux';\r\nimport {withSuspense} from './hoc/ComponentWithSuspense';\r\n\r\nconst UsersContainer = React.lazy(() => import('./components/Users/UsersContainer'));\r\nconst DialogsContainer = React.lazy(() => import ('./components/Dialogs/DialogsContainer'));\r\nconst ProfileContainer = React.lazy(() => import ('./components/Profile/ProfileContainer'));\r\n\r\ntype MapStateToPropsType = {\r\n    initialization: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    getAuthUserData: () => void\r\n    initializeApp: () => void\r\n}\r\n\r\ntype AppPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nexport const mapStateToProps = (state: StateType) => {\r\n    return {\r\n        initialization: state.app.initialization\r\n    }\r\n}\r\n\r\n\r\nclass App extends React.Component<AppPropsType, StateType> {\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp()\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialization) {\r\n            return <Preloader/>\r\n        }\r\n        return (\r\n            <div className={'app-wrapper'}>\r\n                <HeaderContainer/>\r\n                <div className={'app-inner'}>\r\n                    <Navbar/>\r\n                    <div className={'app-inner-content'}>\r\n                        <Route path={'/dialogs'} render={withSuspense(DialogsContainer)}/>\r\n                        <Route path={'/profile/:userId?'}\r\n                               render={withSuspense(ProfileContainer)}/>\r\n                        <Route path={'/users'}\r\n                               render={withSuspense(UsersContainer)}/>\r\n                        <Route path={'/login'}\r\n                               render={() => <Login/>}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(withRouter, connect<MapStateToPropsType, MapDispatchToPropsType, {}, StateType>(mapStateToProps, {\r\n    getAuthUserData,\r\n    initializeApp\r\n}))(App);\r\n","import {applyMiddleware, combineReducers, compose, createStore, Store} from 'redux';\r\nimport {profileReducer} from './profile-reducer';\r\nimport {dialogsReducer} from './dialogs-reducer';\r\nimport {usersReducer} from './users-reducer';\r\nimport {authReducer} from './auth-reducer';\r\nimport thunk from 'redux-thunk';\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport {appReducer} from './app-reducer';\r\n\r\nexport type StateType = ReturnType<typeof reducers>;\r\n\r\nconst reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n} as const);\r\n\r\n\r\n// export const store:Store = createStore(reducers, applyMiddleware(thunk))\r\n\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store:Store = createStore(reducers, composeEnhancers(applyMiddleware(thunk)));\r\n// @ts-ignore\r\nwindow.store = store","import * as serviceWorker from './serviceWorker';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {HashRouter} from 'react-router-dom';\r\nimport App from './App';\r\nimport {store} from './redux/redux-store';\r\nimport {Provider} from 'react-redux';\r\n\r\n\r\nReactDOM.render(\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n            <App/>\r\n            </Provider>\r\n        </HashRouter>, document.getElementById('root')\r\n    );\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import {Field, WrappedFieldProps} from 'redux-form';\r\nimport React, {FC} from 'react';\r\nimport styles from './FormControls.module.css'\r\n\r\nexport const FormControl: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    const hasError = meta.touched && meta.error\r\n\r\n    return (\r\n        <div>\r\n            <div className={hasError ? styles.error : ''}>\r\n                {props.children}\r\n            </div>\r\n            <div>\r\n                {hasError && <span className={styles.errorSpan}>{meta.error}</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n\r\n    return <FormControl input={input} meta={meta}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n\r\n    return <FormControl input={input} meta={meta}><input {...input} {...restProps}/></FormControl>\r\n}\r\n\r\nexport const createField = (placeholder: string | null, name: string, component: FC<WrappedFieldProps>, type: string ,validators: any = [], text = '') => {\r\n    return <div>\r\n        <Field type={type} validate={validators} placeholder={placeholder} name={name} component={component}/>\r\n        <span>{text}</span>\r\n    </div>\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"FormControls_error__SafJ6\",\"errorSpan\":\"FormControls_errorSpan__2gy5U\",\"commonError\":\"FormControls_commonError__dMkCY\"};","import React from 'react';\r\nimport classes from './Preloader.module.css'\r\n\r\nexport const Preloader = () => {\r\n    return <div className={classes.lds_grid}>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n    </div>\r\n}","export const required = (value:string) => value ? undefined : 'Required field'\r\n\r\nexport const maxLength = (max:number) => (value:string) =>\r\n    value && value.length > max ? `Must be ${max} characters or less` : undefined\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2DdZm\",\"header__logo\":\"Header_header__logo__2tHb1\",\"login\":\"Header_login__2DU_B\"};","import {ActionsType, ProfilePageType, ThunkType} from './store';\r\nimport {profileAPI} from '../api/api';\r\n\r\nexport type ProfileType = {\r\n    aboutMe: string\r\n    contacts: {\r\n        facebook: null | string\r\n        website: null | string\r\n        vk: null | string\r\n        twitter: null | string\r\n        instagram: null | string\r\n        youtube: null | string\r\n        github: null | string\r\n        mainLink: null | string\r\n    }\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    userId: number\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n}\r\n\r\nconst initialState: ProfilePageType = {\r\n    profile: null,\r\n    messageForNewPost: '',\r\n    status: '',\r\n    posts: [\r\n        {id: 1, message: 'Hi, how are you?', likesCount: 12},\r\n        {id: 2, message: 'It\\'s my first post', likesCount: 12},\r\n        {id: 3, message: 'Yo Yo Yo', likesCount: 12},\r\n        {id: 4, message: 'It\\'s revolution Jhonny!', likesCount: 100500}\r\n    ]\r\n}\r\n\r\nexport const profileReducer = (state: ProfilePageType = initialState, action: ActionsType): ProfilePageType => {\r\n    switch (action.type) {\r\n        case 'PROFILE/ADD-POST':\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, {id: 5, message: action.value, likesCount: 0}],\r\n            }\r\n        case 'PROFILE/SET-PROFILE':\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case 'PROFILE/SET-PROFILE-STATUS':\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case 'PROFILE/DELETE-POST':\r\n            return {...state, posts: state.posts.filter(p => p.id !== action.id)}\r\n        default :\r\n            return state\r\n    }\r\n}\r\nexport type AddPostActionType = {\r\n    type: 'PROFILE/ADD-POST',\r\n    value: string\r\n}\r\nexport type SetProfileStatusType = {\r\n    type: 'PROFILE/SET-PROFILE-STATUS'\r\n    status: string\r\n}\r\nexport type SetProfileType = ReturnType<typeof setUserProfile>\r\nexport type DeletePostType = ReturnType<typeof deletePost>\r\n\r\n\r\nexport const addPostActionCreator = (value: string): AddPostActionType => {\r\n    return {\r\n        type: 'PROFILE/ADD-POST',\r\n        value\r\n    }\r\n};\r\n\r\nexport const setUserProfile = (profile: ProfileType) => {\r\n    return {\r\n        type: 'PROFILE/SET-PROFILE',\r\n        profile\r\n    } as const\r\n}\r\n\r\nexport const setProfileStatus = (status: string): SetProfileStatusType => {\r\n    return {\r\n        type: 'PROFILE/SET-PROFILE-STATUS',\r\n        status: status\r\n    }\r\n}\r\n\r\nexport const deletePost = (id: number) => ({type: 'PROFILE/DELETE-POST', id} as const)\r\nexport const getUserProfile = (userId: string) => (dispatch: (action: ActionsType) => void) => {\r\n    profileAPI.getProfile(userId)\r\n        .then(data => {\r\n            dispatch(setUserProfile(data))\r\n        })\r\n}\r\n\r\nexport const getProfileStatus = (userId: string): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.getProfileStatus(userId)\r\n    dispatch(setProfileStatus(data))\r\n}\r\n\r\nexport const updateProfileStatus = (status: string): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.updateProfileStatus(status)\r\n    if (data.resultCode === 0) {\r\n        dispatch(setProfileStatus(status))\r\n    }\r\n}"],"sourceRoot":""}