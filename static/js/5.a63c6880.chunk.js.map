{"version":3,"sources":["hoc/AuthRedirect.tsx","components/Dialogs/Dialog/Dialog.module.css","components/Dialogs/Message/Message.module.css","components/Dialogs/Dialogs.module.css","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["redirectMapStateToProps","state","isAuth","auth","withAuthRedirect","WrappedComponent","connect","props","restProps","to","module","exports","Dialog","className","styles","dialogName","name","id","Message","speechBubble","message","maxLength10","maxLength","DialogFormMessage","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","compose","dialogs","dialogsPage","messages","textForNewMessage","dispatch","onClickSendMessageHandler","value","addNewMessageActionCreator","map","d","key","m","title","dialogsContainer"],"mappings":"qMAUMA,EAA0B,SAACC,GAC7B,MAAO,CACHC,OAAQD,EAAME,KAAKD,SAKpB,SAASE,EAAsBC,GAUlC,OAAOC,YAAyDN,EAAzDM,EAR0D,SAACC,GAAW,IAChEL,EAAwBK,EAAxBL,OAAWM,EADoD,YACvCD,EADuC,YAEpE,OAAKL,EAEE,kBAACG,EAAqBG,GAFT,kBAAC,IAAD,CAAUC,GAAI,gB,oBCpB9CC,EAAOC,QAAU,CAAC,WAAa,2BAA2B,KAAO,uB,oBCAjED,EAAOC,QAAU,CAAC,aAAe,gC,oBCAjCD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,gBAAkB,iCAAiC,MAAQ,uBAAuB,iBAAmB,oC,+FCSnJ,SAASC,EAAOL,GACnB,OACI,yBAAKM,UAAWC,IAAOC,YACnB,kBAAC,IAAD,CAASF,UAAWC,IAAOE,KAAMP,GAAE,mBAAcF,EAAMU,KAAOV,EAAMS,O,sBCNzE,SAASE,EAAQX,GACpB,OACI,yBAAKM,UAAWC,IAAOK,cAClBZ,EAAMa,S,uDCGbC,EAAcC,YAAU,IA+B9B,IAcMC,EAAoBC,YAAwB,CAACC,KAAM,UAA/BD,EAdsC,SAACjB,GAC7D,OACI,0BAAMmB,SAAUnB,EAAMoB,cAClB,6BACI,kBAACC,EAAA,EAAD,CAAOZ,KAAM,UAAWa,UAAWC,IAAUC,SAAU,CAACC,IAAUX,MAEtE,6BACI,qD,wBCrBDY,sBAA6B7B,IACxCE,aAhBoB,SAACL,GACrB,MAAO,CACHiC,QAASjC,EAAMkC,YAAYD,QAC3BE,SAAUnC,EAAMkC,YAAYC,SAC5BC,kBAAmBpC,EAAMkC,YAAYE,kBACrCnC,OAAQD,EAAME,KAAKD,WAIA,SAACoC,GACxB,MAAO,CACHC,0BAA2B,SAACC,GAAD,OAAkBF,EAASG,YAA2BD,SAI1EP,EDdR,SAAiB1B,GACpB,IAAM2B,EAAU3B,EAAM2B,QAAQQ,KAAI,SAAAC,GAC9B,OAAO,kBAAC/B,EAAD,CAAQgC,IAAKD,EAAE1B,GAAID,KAAM2B,EAAE3B,KAAMC,GAAI0B,EAAE1B,QAG5CmB,EAAW7B,EAAM6B,SAASM,KAAI,SAAAG,GAChC,OAAO,kBAAC3B,EAAD,CAAS0B,IAAKC,EAAE5B,GAAIG,QAASyB,EAAEzB,aAO1C,OAAQ,oCACA,wBAAIP,UAAWC,IAAOgC,OAAtB,eACJ,6BACI,yBAAKjC,UAAWC,IAAOiC,kBAClBb,GAEL,6BACKE,EACD,kBAACb,EAAD,CAAmBG,SAZR,SAACc,GACpBjC,EAAMgC,0BAA0BC,EAAMpB","file":"static/js/5.a63c6880.chunk.js","sourcesContent":["import React from 'react';\r\nimport {StateType} from '../redux/store';\r\nimport {connect} from 'react-redux';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\ntype RedirectMapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\n\r\nconst redirectMapStateToProps = (state: StateType): RedirectMapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n\r\n    const RedirectComponent: React.FC<RedirectMapStateToPropsType> = (props) => {\r\n            let {isAuth, ...restProps} = props\r\n            if (!isAuth) return <Redirect to={'/login'}/>\r\n\r\n            return <WrappedComponent {...restProps as WCP}/>\r\n    }\r\n\r\n\r\n    return connect<RedirectMapStateToPropsType, {}, WCP, StateType>(redirectMapStateToProps)(RedirectComponent)\r\n}\r\n\r\n// export function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n//\r\n//     class RedirectComponent extends React.Component<WCP & RedirectMapStateToPropsType, StateType> {\r\n//         render() {\r\n//             let {isAuth, ...restProps} = this.props\r\n//             if (!isAuth) return <Redirect to={'/login'}/>\r\n//             return <WrappedComponent {...restProps as WCP}/>\r\n//\r\n//         }\r\n//     }\r\n//\r\n//\r\n//     return connect<RedirectMapStateToPropsType, {}, WCP, StateType>(redirectMapStateToProps)(RedirectComponent)\r\n// }\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogName\":\"Dialog_dialogName__1tfS7\",\"name\":\"Dialog_name__294Qh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"speechBubble\":\"Message_speechBubble__3FuJm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__vq8c7\",\"dialogs__button\":\"Dialogs_dialogs__button__3ky7C\",\"title\":\"Dialogs_title__1dMkn\",\"dialogsContainer\":\"Dialogs_dialogsContainer__5-z8X\"};","import React from 'react';\r\nimport styles from './Dialog.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\n\r\ntype DialogPropsType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nexport function Dialog(props: DialogPropsType) {\r\n    return (\r\n        <div className={styles.dialogName}>\r\n            <NavLink className={styles.name} to={`/dialogs/${props.id}`}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport styles from './Message.module.css';\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n}\r\n\r\nexport function Message(props: MessagePropsType) {\r\n    return (\r\n        <div className={styles.speechBubble}>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {Dialog} from './Dialog/Dialog';\r\nimport {Message} from './Message/Message';\r\nimport styles from './Dialogs.module.css'\r\nimport {DialogsPropsType} from './DialogsContainer';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLength, required} from '../../validators/validators';\r\nimport {Textarea} from '../common/formContorols/FormControls';\r\n\r\ntype FormDataType = {\r\n    message: string\r\n}\r\n\r\nconst maxLength10 = maxLength(10)\r\n\r\n\r\nexport function Dialogs(props: DialogsPropsType) {\r\n    const dialogs = props.dialogs.map(d => {\r\n        return <Dialog key={d.id} name={d.name} id={d.id}/>\r\n    })\r\n\r\n    const messages = props.messages.map(m => {\r\n        return <Message key={m.id} message={m.message}/>\r\n    })\r\n\r\n    const sendNewMessage = (value:FormDataType) => {\r\n        props.onClickSendMessageHandler(value.message)\r\n    }\r\n\r\n    return (<>\r\n            <h2 className={styles.title}>In progress</h2>\r\n        <div>\r\n            <div className={styles.dialogsContainer}>\r\n                {dialogs}\r\n            </div>\r\n            <div>\r\n                {messages}\r\n                <DialogFormMessage onSubmit={sendNewMessage}/>\r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nconst DialogMessage:React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={'message'} component={Textarea} validate={[required, maxLength10]}/>\r\n            </div>\r\n            <div>\r\n                <button>Send Message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst DialogFormMessage = reduxForm<FormDataType>({form: 'dialog'})(DialogMessage)\r\n\r\n","import {addNewMessageActionCreator} from '../../redux/dialogs-reducer';\r\nimport {Dialogs} from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {ActionsType, StateType} from '../../redux/store';\r\nimport {compose, Dispatch} from 'redux';\r\nimport {withAuthRedirect} from '../../hoc/AuthRedirect';\r\n\r\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\ntype MapDispatchToPropsType = {\r\n    onClickSendMessageHandler: (value:string) => void\r\n}\r\n\r\ntype MapStateToPropsType = ReturnType<typeof mapStateToProps>\r\n\r\nconst mapStateToProps = (state: StateType) => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        messages: state.dialogsPage.messages,\r\n        textForNewMessage: state.dialogsPage.textForNewMessage,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<ActionsType>): MapDispatchToPropsType => {\r\n    return {\r\n        onClickSendMessageHandler: (value:string) => dispatch(addNewMessageActionCreator(value))\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(withAuthRedirect,\r\n    connect<MapStateToPropsType, MapDispatchToPropsType, {}, StateType>(mapStateToProps, mapDispatchToProps)\r\n    )(Dialogs)"],"sourceRoot":""}